
// ${AUTO_WARNING}
// ${Program}

#include "../include/${Object}.h"

using namespace std;
using namespace UZH;

${Object}::${Object}() {
  
}


${Object}::${Object}( const Ntuple::${Object}NtupleObject* ana, const Int_t idx ) 
: Basic( idx )
${{Only:TruthJet,GenParticle,Jet,Muon,Electron,Tau: , Particle() }}

${{Only:Jet,TruthJet:
  , m_isTagged( false )
}}
{
  m_ana=ana;
  // copy variables defined in Particle.h
${{AllBasics:    m_#name# = &((*ana->#name#)[idx]); }}
  m_lvl    = ana->detailLevel;

${{Only:Jet:
  m_scalefactor = 0;
}}
  // copy rest of variables
  /*${ {AllNoBools:    printf("acc#name#\n"); if (ana->m_connectsucceeded[#index#]) 
         {printf("?\n"); m_#name# = &((*ana->#name#)[idx]);}
    else {printf("fak\n"); m_#name# = new #type#(); *m_#name# = #default#; } }}
  */
${{AllVarsDL:ana->detailLevel:    if (ana->m_connectsucceeded[#index#]) m_#name# = &((*ana->#name#)[idx]); else m_#name# = #default#; }}

${{Only:Muon:
 //Set ptMS and ptID
 //if( (ana->detailLevel & Ntuple::MuonAnalysis) == Ntuple::MuonAnalysis ) {
 //   if(me_qoverp()!=0) m_ptMS = 1./std::fabs(me_qoverp()) * std::sin(me_theta()); else m_ptMS = 0; 
 //	  if(id_qoverp()!=0) m_ptID = 1./std::fabs(id_qoverp()) * std::sin(id_theta()); else m_ptID = 0; 
 //}

}}

${{Only:Electron:
	//Set("clusterEuncorrected", cluster_e());
	//Set("EtCone20uncorrected", etcone20());
}}

}


${Object}::~${Object}() {

}

ostream& operator<<( ostream& out,
                     const ${Object}& rhs ) {
  
   out << "${Object} -" << ( Basic) rhs; 
${{Only:Jet,Muon,Electron,TruthJet,GenParticle:   out << "${Object} -" << ( Particle ) rhs; }}
${{Only:Jet,TruthJet:
  out << " isTagged:" << rhs.isTagged();
}}
${{Only:Jet:
  out << " JES: " << rhs.getJetSF();
}}
  ${{PrintAllVarsDL:rhs.getLvl():  out << " #name# " << rhs.#name#()}}
  return out;
}


${{Only:Muon,Electron,Tau:
bool sort${Object}Pt::operator()( const ${Object}& e1,
                                 const ${Object}& e2 ) {
  return ( e1.pt() > e2.pt() ) ? true : false;
}

bool operator<<( const ${Object}& e1, const ${Object}& e2 ) {
  sort${Object}Pt sort;
  return sort( e1, e2 );
}
}}

${{Only:Muon,Jet,TruthJet,Electron,Tau:

TLorentzVector* ${Object}::getTLV() const {

  TLorentzVector* tlv = new TLorentzVector();
  tlv->SetPtEtaPhiE(*(m_pt), *(m_eta), *(m_phi), *(m_e));
  return tlv;

}


TLorentzVector ${Object}::tlv() const {

  TLorentzVector tlv;
  tlv.SetPtEtaPhiE(*(m_pt), *(m_eta), *(m_phi), *(m_e));
  return tlv;

}
}}

${{Only:GenParticle:

TLorentzVector* ${Object}::getTLV() const {

  TLorentzVector* tlv = new TLorentzVector();
  tlv->SetPtEtaPhiM(*(m_pt), *(m_eta), *(m_phi), *(m_m));
  return tlv;

}

TLorentzVector ${Object}::tlv() const {
  TLorentzVector tlv;
  tlv.SetPtEtaPhiM(*(m_pt), *(m_eta), *(m_phi), *(m_m));
  return tlv;
}

}}


${{Only:Jet:
void ${Object}::scaleJES( const floatingnumber ssigma ) {
  m_scalefactor = ssigma;
  if( fabs( ssigma ) < 1e-6 ) return;
 
  *(m_e)  *= ( 1.0 + ssigma );
  *(m_pt) *= ( 1.0 + ssigma );
 
//  if ( m_lvl >= 1 ) {
//    *(m_px) *= ( 1.0 + ssigma );
//    *(m_py) *= ( 1.0 + ssigma );
//    *(m_pz) *= ( 1.0 + ssigma );
//  }
}
}}

${{Only:GenParticle:
  floatingnumber ${Object}::DeltaR(const ${Object}& p) const {
    return this->tlv().DeltaR(p.tlv());
  }
}}
